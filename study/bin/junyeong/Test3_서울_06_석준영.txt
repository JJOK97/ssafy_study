1.
// 트리 노드 구현
static class Node {
	// data를 String 형태로 노드에 저장
	String data;
	// left, right Node 정보
	Node left;
	Node right;
	// 기본 생성자
	Node(){}
	// data 할당 생성자
	Node(String data){
		this.data = data;
	}
}

// 전위순회
void PreOrder (Node node){
	// 기저조건 : 빈 노드
	if (node == null) return;
	// 전위순회이므로 left, right Node보다 앞에 위치
	System.out.println(node.data);
	PreOrder(node.left);
	PreOrder(node.right);
}

// 중위순회
void InOrder (Node node){
	// 기저조건 : 빈 노드
	if (node == null) return;
	InOrder(node.left);
	// 중위순회이므로 left, right Node 사이에 위치
	System.out.println(node.data);
	InOrder(node.right);
}

// 후위순회
void PostOrder (Node node){
	// 기저조건 : 빈 노드
	if (node == null) return;
	PostOrder(node.left);
	PostOrder(node.right);
	// 후위순회이므로 left, right Node보다 뒤에 위치
	System.out.println(node.data);
}

2. 완전이진트리는 부모 노드가 최대 2개의 자식 노드를 가질 수 있으며, 항상 포화 상태를 유지하는 트리를 말한다.
구현 방법에 따라 상대적으로 우월한 시간복잡도로도 최솟값/최댓값이 최상위 노드에 위치할 수 있어 최소/최대 힙 구현에 사용된다.

3. 트리는 노드끼리 1:N 관계를 가지게 하여 높이가 작을수록 배열에 비해 탐색에 대한 장점을 가지는데, 
편향이진트리는 배열과 비슷한 긴 선형구조를 가져 탐색에 대한 장점도 없고, 배열로 트리를 구현할 경우 메모리 낭비도 발생한다.